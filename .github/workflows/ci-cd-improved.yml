name: Build and Deploy to GKE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: google-ads-mcp-cluster
  GKE_ZONE: us-central1
  IMAGE: google-ads-mcp-server

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Check MCP availability
      run: |
        python -m pip install --upgrade pip
        echo "Checking if MCP package is available on PyPI..."
        if pip index versions mcp &> /dev/null; then
          echo "MCP package found on PyPI"
        else
          echo "MCP package not found on PyPI, will use submodule if available"
          echo "Checking if mcp-python-sdk directory exists..."
          if [ -d "mcp-python-sdk" ]; then
            echo "mcp-python-sdk directory found"
            ls -la mcp-python-sdk
          else
            echo "mcp-python-sdk directory not found"
          fi
        fi
      
    - name: Setup Google Cloud CLI
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: google-github-actions/setup-gcloud@v2
        
    - name: Auth Docker
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: gcloud auth configure-docker
        
    - name: Build Docker Image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA .
        
    - name: Run Tests in Container
      run: |
        # Create test env file
        echo "GOOGLE_ADS_DEVELOPER_TOKEN=${{ secrets.GOOGLE_ADS_DEVELOPER_TOKEN }}" > .env.test
        echo "GOOGLE_ADS_CLIENT_ID=${{ secrets.GOOGLE_ADS_CLIENT_ID }}" >> .env.test
        echo "GOOGLE_ADS_CLIENT_SECRET=${{ secrets.GOOGLE_ADS_CLIENT_SECRET }}" >> .env.test
        echo "GOOGLE_ADS_REFRESH_TOKEN=${{ secrets.GOOGLE_ADS_REFRESH_TOKEN }}" >> .env.test
        echo "GOOGLE_ADS_LOGIN_CUSTOMER_ID=${{ secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID }}" >> .env.test
        echo "APP_ENV=test" >> .env.test
        echo "CACHE_ENABLED=true" >> .env.test
        
        # Run tests inside the container
        docker run --rm -v $(pwd)/.env.test:/app/.env gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA python -m pytest -v
        
    - name: Tag Docker Image
      if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
      run: |
        docker tag gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA gcr.io/$PROJECT_ID/$IMAGE:latest
        
        # If using tags
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          docker tag gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA gcr.io/$PROJECT_ID/$IMAGE:${GITHUB_REF#refs/tags/}
        fi
        
    - name: Push Docker Image
      if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
      run: |
        docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$IMAGE:latest
        
        # If using tags
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          docker push gcr.io/$PROJECT_ID/$IMAGE:${GITHUB_REF#refs/tags/}
        fi
  
  deploy-to-test:
    name: Deploy to Test Environment
    needs: build-and-test
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
        
    - name: Get GKE Credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Set up Kustomize
      run: |
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod +x kustomize
        
    - name: Update Kubernetes resources
      run: |
        # Replace the placeholder image with the actual image in the deployment
        sed -i "s|gcr.io/PROJECT_ID/google-ads-mcp-server:TAG|gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA|g" kubernetes/base/deployment.yaml
        
    - name: Deploy to GKE Test Environment
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace test --dry-run=client -o yaml | kubectl apply -f -
        
        # Create secret with actual credentials
        kubectl create secret generic google-ads-credentials \
          --namespace=test \
          --from-literal=GOOGLE_ADS_DEVELOPER_TOKEN=${{ secrets.GOOGLE_ADS_DEVELOPER_TOKEN }} \
          --from-literal=GOOGLE_ADS_CLIENT_ID=${{ secrets.GOOGLE_ADS_CLIENT_ID }} \
          --from-literal=GOOGLE_ADS_CLIENT_SECRET=${{ secrets.GOOGLE_ADS_CLIENT_SECRET }} \
          --from-literal=GOOGLE_ADS_REFRESH_TOKEN=${{ secrets.GOOGLE_ADS_REFRESH_TOKEN }} \
          --from-literal=GOOGLE_ADS_LOGIN_CUSTOMER_ID=${{ secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy using kustomize
        ./kustomize build kubernetes/overlays/test | kubectl apply -f -
        
        # Wait for deployment to finish
        kubectl rollout status deployment/google-ads-mcp-server -n test --timeout=180s
        
    - name: Verify deployment
      run: |
        # Get the pod name
        POD_NAME=$(kubectl get pods -n test -l app=google-ads-mcp-server -o jsonpath="{.items[0].metadata.name}")
        
        # Check the pod status
        kubectl get pod $POD_NAME -n test -o jsonpath="{.status.phase}"
        
        # Check the health endpoint
        echo "Waiting for service to be ready..."
        sleep 30
        SERVICE_IP=$(kubectl get svc google-ads-mcp-server -n test -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
        if [[ -n "$SERVICE_IP" ]]; then
          echo "Testing health endpoint at http://$SERVICE_IP/health"
          curl -s http://$SERVICE_IP/health | grep -q "status.*OK" && echo "Health check passed" || echo "Health check failed"
        else
          echo "Service IP not available, skipping health check"
        fi 