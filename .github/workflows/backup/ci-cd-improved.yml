name: Build and Deploy to GKE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: google-ads-mcp-cluster
  GKE_ZONE: us-central1
  IMAGE: google-ads-mcp-server

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Ensure Git is installed
      run: |
        echo "Ensuring Git is installed..."
        if ! command -v git &> /dev/null; then
          echo "Git not found, installing..."
          sudo apt-get update
          sudo apt-get install -y git
        else
          echo "Git already installed"
          git --version
        fi
        
    - name: Check MCP availability
      run: |
        python -m pip install --upgrade pip
        echo "Checking if MCP can be installed from GitHub..."
        pip install "mcp @ git+https://github.com/modelcontextprotocol/python-sdk.git"
        echo "Verifying MCP installation..."
        # Fix: Check for module existence instead of version attribute
        python -c "import mcp; print('Successfully installed MCP')"
        echo "Installing all requirements..."
        pip install -r requirements.txt
      
    - name: Setup Google Cloud CLI
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: google-github-actions/setup-gcloud@v2
        
    - name: Auth Docker
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: gcloud auth configure-docker
        
    - name: Build Docker Image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA .
        
    - name: Run Tests in Container
      run: |
        # Create test env file
        echo "GOOGLE_ADS_DEVELOPER_TOKEN=${{ secrets.GOOGLE_ADS_DEVELOPER_TOKEN }}" > .env.test
        echo "GOOGLE_ADS_CLIENT_ID=${{ secrets.GOOGLE_ADS_CLIENT_ID }}" >> .env.test
        echo "GOOGLE_ADS_CLIENT_SECRET=${{ secrets.GOOGLE_ADS_CLIENT_SECRET }}" >> .env.test
        echo "GOOGLE_ADS_REFRESH_TOKEN=${{ secrets.GOOGLE_ADS_REFRESH_TOKEN }}" >> .env.test
        echo "GOOGLE_ADS_LOGIN_CUSTOMER_ID=${{ secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID }}" >> .env.test
        echo "APP_ENV=test" >> .env.test
        echo "CACHE_ENABLED=true" >> .env.test
        
        # Run tests inside the container
        docker run --rm -v $(pwd)/.env.test:/app/.env gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA python -m pytest -v
        
    - name: Tag Docker Image
      if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
      run: |
        docker tag gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA gcr.io/$PROJECT_ID/$IMAGE:latest
        
        # If using tags
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          docker tag gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA gcr.io/$PROJECT_ID/$IMAGE:${GITHUB_REF#refs/tags/}
        fi
        
    - name: Push Docker Image
      if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
      run: |
        docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$IMAGE:latest
        
        # If using tags
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          docker push gcr.io/$PROJECT_ID/$IMAGE:${GITHUB_REF#refs/tags/}
        fi
  
  deploy-to-test:
    name: Deploy to Test Environment
    needs: build-and-test
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        token_format: 'access_token'
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: 'gke-gcloud-auth-plugin'
        
    - name: Get GKE Credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER \
          --zone $GKE_ZONE \
          --project $PROJECT_ID
        
    - name: Verify kubectl configuration
      run: |
        echo "Verifying kubectl configuration:"
        kubectl config view
        echo "Current context:"
        kubectl config current-context
        echo "Testing connection to cluster:"
        kubectl get namespaces
        
    - name: Set up Kustomize
      run: |
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod +x kustomize
        
    - name: Update Kubernetes resources
      run: |
        # Replace the placeholder image with the actual image in the deployment
        sed -i "s|gcr.io/PROJECT_ID/google-ads-mcp-server:TAG|gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA|g" kubernetes/base/deployment.yaml
        
    - name: Deploy to GKE Test Environment
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace test --dry-run=client -o yaml | kubectl apply -f -
        
        # Check if secret exists and delete it if it does
        if kubectl get secret google-ads-credentials -n test 2>/dev/null; then
          echo "Secret exists, deleting it for recreation..."
          kubectl delete secret google-ads-credentials -n test
        fi
        
        # Create secret explicitly (not using --dry-run)
        echo "Creating google-ads-credentials secret in test namespace..."
        kubectl create secret generic google-ads-credentials \
          --namespace=test \
          --from-literal=GOOGLE_ADS_DEVELOPER_TOKEN="${{ secrets.GOOGLE_ADS_DEVELOPER_TOKEN }}" \
          --from-literal=GOOGLE_ADS_CLIENT_ID="${{ secrets.GOOGLE_ADS_CLIENT_ID }}" \
          --from-literal=GOOGLE_ADS_CLIENT_SECRET="${{ secrets.GOOGLE_ADS_CLIENT_SECRET }}" \
          --from-literal=GOOGLE_ADS_REFRESH_TOKEN="${{ secrets.GOOGLE_ADS_REFRESH_TOKEN }}" \
          --from-literal=GOOGLE_ADS_LOGIN_CUSTOMER_ID="${{ secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID }}"
        
        # Verify secret was created
        echo "Verifying secret exists..."
        kubectl get secret google-ads-credentials -n test
        
        # Deploy using kustomize with --validate=false flag
        ./kustomize build kubernetes/overlays/test | kubectl apply --validate=false -f -
        
        # Wait for deployment to finish with increased timeout
        kubectl rollout status deployment/google-ads-mcp-server -n test --timeout=300s
        
    - name: Debug Deployment Failure
      if: failure()
      run: |
        echo "Checking pod status..."
        kubectl get pods -n test
        
        echo "Checking deployment details..."
        kubectl describe deployment google-ads-mcp-server -n test
        
        echo "Getting pod details and logs..."
        POD_NAME=$(kubectl get pods -n test -l app=google-ads-mcp-server -o jsonpath="{.items[0].metadata.name}")
        if [ -n "$POD_NAME" ]; then
          echo "Pod events and details:"
          kubectl describe pod $POD_NAME -n test
          echo "Pod logs (if available):"
          kubectl logs $POD_NAME -n test --tail=100 || echo "Unable to get logs"
        fi