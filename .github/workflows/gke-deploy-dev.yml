name: Deploy to GKE Dev Environment

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: google-ads-mcp-cluster
  GKE_ZONE: us-central1
  IMAGE: google-ads-mcp-server
  NAMESPACE: dev
  REGISTRY: us-central1-docker.pkg.dev

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install and Verify MCP
      run: |
        python -m pip install --upgrade pip
        echo "Checking if MCP can be installed from GitHub..."
        pip install "mcp @ git+https://github.com/modelcontextprotocol/python-sdk.git"
        echo "Verifying MCP installation..."
        python -c "import mcp; print('Successfully installed MCP')"
        echo "Installing all requirements..."
        pip install -r requirements.txt
        
    - name: Auth to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker $REGISTRY
        
    - name: Check Artifact Registry Repository
      id: check-repo
      run: |
        echo "Checking if repository exists..."
        if gcloud artifacts repositories describe $IMAGE --location=$GKE_ZONE --project=$PROJECT_ID 2>/dev/null; then
          echo "Repository exists"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Repository does not exist"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Artifact Registry Repository
      if: steps.check-repo.outputs.exists == 'false'
      run: |
        echo "Creating repository..."
        gcloud artifacts repositories create $IMAGE \
          --repository-format=docker \
          --location=$GKE_ZONE \
          --project=$PROJECT_ID \
          --description="Docker repository for Google Ads MCP Server"
      continue-on-error: true  # Continue even if repository creation fails
        
    - name: Get GKE Credentials
      run: |
        echo "Getting GKE credentials..."
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID
        echo "Verifying Kubernetes context..."
        kubectl config current-context
        echo "Verifying cluster access..."
        kubectl get nodes
        
    - name: Build and Push Docker Image
      run: |
        echo "Building Docker image..."
        docker build -t $REGISTRY/$PROJECT_ID/$IMAGE:$GITHUB_SHA .
        echo "Pushing to Artifact Registry..."
        docker push $REGISTRY/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        
    - name: Create Kubernetes Secret
      run: |
        echo "Creating Kubernetes secret for Google Ads credentials..."
        kubectl create secret generic google-ads-credentials \
          --from-file=credentials.json=${{ secrets.GOOGLE_ADS_CREDENTIALS }} \
          --namespace=$NAMESPACE \
          --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Deploy to GKE
      run: |
        echo "Deploying to GKE..."
        cd kubernetes/overlays/dev
        kustomize edit fix
        kustomize edit set image gcr.io/PROJECT_ID/google-ads-mcp-server=$REGISTRY/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        kustomize build . | kubectl apply -f -
        
    - name: Verify Deployment
      run: |
        echo "Waiting for deployment to stabilize..."
        kubectl rollout status deployment/google-ads-mcp-server -n $NAMESPACE --timeout=300s
        
        echo "Checking pod status..."
        kubectl get pods -n $NAMESPACE
        
        echo "Testing health endpoint..."
        sleep 30  # Give the pod time to start
        POD_NAME=$(kubectl get pods -n $NAMESPACE -l app=google-ads-mcp-server -o jsonpath="{.items[0].metadata.name}")
        kubectl exec -n $NAMESPACE $POD_NAME -- curl -v http://localhost:8000/health
        
    - name: Debug Deployment Failure
      if: failure()
      run: |
        echo "=== Checking GKE Authentication ==="
        echo "Current context:"
        kubectl config current-context || true
        echo "Available contexts:"
        kubectl config get-contexts || true
        
        echo "=== Checking Pod Status ==="
        kubectl get pods -n $NAMESPACE || true
        
        echo "=== Checking Deployment Details ==="
        kubectl describe deployment google-ads-mcp-server -n $NAMESPACE || true
        
        echo "=== Getting Pod Details and Logs ==="
        POD_NAME=$(kubectl get pods -n $NAMESPACE -l app=google-ads-mcp-server -o jsonpath="{.items[0].metadata.name}" || true)
        if [ -n "$POD_NAME" ]; then
          echo "Pod events and details:"
          kubectl describe pod $POD_NAME -n $NAMESPACE || true
          echo "Pod logs:"
          kubectl logs $POD_NAME -n $NAMESPACE --all-containers=true || true
          echo "Previous pod logs (if any):"
          kubectl logs $POD_NAME -n $NAMESPACE --all-containers=true --previous || true
        fi
        
        echo "=== Checking Node Status ==="
        kubectl describe nodes || true
        
        echo "=== Checking All Resources in Namespace ==="
        kubectl get all -n $NAMESPACE || true
        
        echo "=== Checking Secrets in Namespace ==="
        kubectl get secrets -n $NAMESPACE || true
        
        echo "=== Checking Events in Namespace ==="
        kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' || true
        
        echo "=== Checking Service Account Permissions ==="
        gcloud projects get-iam-policy $PROJECT_ID --flatten="bindings[].members" --format="table(bindings.role,bindings.members)" || true 