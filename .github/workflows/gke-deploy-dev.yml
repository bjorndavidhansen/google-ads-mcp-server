name: Deploy to GKE Dev

on:
  push:
    branches:
      - dev
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: google-ads-mcp-cluster
  GKE_ZONE: us-central1
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: ${{ secrets.GCP_PROJECT_ID }}/google-ads-mcp
  IMAGE: mcp-server
  NAMESPACE: google-ads-mcp
  DEPLOYMENT_NAME: mcp-server

jobs:
  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up authentication to Google Cloud
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    # Set up Cloud SDK after authentication
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    # Install GKE auth plugin for kubectl
    - name: Install GKE auth plugin
      run: |
        echo "Installing GKE auth plugin..."
        gcloud components install gke-gcloud-auth-plugin
        echo "Setting USE_GKE_GCLOUD_AUTH_PLUGIN=True"
        echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
        echo "Verifying installation..."
        which gke-gcloud-auth-plugin || echo "Plugin not found in PATH"

    # Configure Docker to use gcloud credentials
    - name: Configure Docker for Artifact Registry
      run: |
        echo "Configuring Docker for Artifact Registry..."
        gcloud auth configure-docker ${{ env.REGISTRY }} --quiet

    # Get GKE credentials using the action
    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        project_id: ${{ env.PROJECT_ID }}

    # Verify the connection to the cluster
    - name: Verify Kubernetes Connection
      run: |
        echo "Verifying cluster connection..."
        kubectl config current-context
        kubectl get namespaces

    # Continue with the rest of the workflow...
    - name: Verify Service Account Permissions
      run: |
        echo "Verifying service account permissions..."
        echo "Active account:"
        gcloud auth list
        
        echo "Checking IAM policy..."
        gcloud projects get-iam-policy ${{ env.PROJECT_ID }} \
          --flatten="bindings[].members" \
          --format="table(bindings.role,bindings.members)" \
          --filter="bindings.members:$(gcloud config get-value account)"
        
        echo "Testing Artifact Registry permissions..."
        gcloud artifacts repositories list --project=${{ env.PROJECT_ID }} || echo "No repositories found"

    # Rest of the workflow remains unchanged
    - name: Check Artifact Registry Repository
      run: |
        echo "Checking if repository exists..."
        if ! gcloud artifacts repositories describe ${{ env.REPOSITORY }} --location=${{ env.GKE_ZONE }} --project=${{ env.PROJECT_ID }} 2>/dev/null; then
          echo "Repository does not exist. Creating..."
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.GKE_ZONE }} \
            --project=${{ env.PROJECT_ID }} \
            --description="Docker repository for MCP server"
        else
          echo "Repository already exists"
        fi

    - name: Build and Push Docker Image
      run: |
        echo "Building Docker image..."
        docker build -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} .
        
        echo "Pushing Docker image..."
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}

    - name: Create Kubernetes Secrets
      run: |
        echo "Creating Kubernetes secrets..."
        # Create namespace if it doesn't exist
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Create Google Ads credentials secret
        echo "${{ secrets.GOOGLE_ADS_CREDENTIALS }}" | base64 -d > credentials.json
        kubectl create secret generic google-ads-credentials \
          --from-file=credentials.json \
          --namespace=${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Create Artifact Registry secret
        kubectl create secret docker-registry artifact-registry-secret \
          --docker-server=${{ env.REGISTRY }} \
          --docker-username=_json_key \
          --docker-password="$(cat ${{ secrets.GCP_SA_KEY }})" \
          --namespace=${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to GKE
      run: |
        echo "Deploying to GKE..."
        # Update image in deployment
        kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
          ${{ env.DEPLOYMENT_NAME }}=${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} \
          --namespace=${{ env.NAMESPACE }}
        
        # Wait for rollout
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} \
          --namespace=${{ env.NAMESPACE }} \
          --timeout=300s

    - name: Verify Deployment
      run: |
        echo "Verifying deployment..."
        # Check pod status
        kubectl get pods -n ${{ env.NAMESPACE }} -o wide
        
        # Check deployment status
        kubectl get deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} -o yaml
        
        # Check service status
        kubectl get service ${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} -o yaml

    - name: Debug Deployment
      if: failure()
      run: |
        echo "=== Debugging Deployment ==="
        echo "1. Checking node status..."
        kubectl get nodes -o wide
        
        echo "2. Checking namespace resources..."
        kubectl get all -n ${{ env.NAMESPACE }} -o wide
        
        echo "3. Checking secrets in namespace..."
        kubectl get secrets -n ${{ env.NAMESPACE }}
        
        echo "4. Checking events in namespace (sorted by timestamp)..."
        kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp'
        
        echo "5. Checking pod logs..."
        for pod in $(kubectl get pods -n ${{ env.NAMESPACE }} -l app=${{ env.DEPLOYMENT_NAME }} -o name); do
          echo "=== Logs for $pod ==="
          kubectl logs -n ${{ env.NAMESPACE }} $pod --all-containers=true
          echo "=== Previous pod logs ==="
          kubectl logs -n ${{ env.NAMESPACE }} $pod --all-containers=true --previous || true
          echo "=== Pod events and status ==="
          kubectl describe -n ${{ env.NAMESPACE }} $pod
        done 