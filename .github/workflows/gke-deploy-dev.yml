name: Build and Deploy to GKE Dev Environment

on:
  push:
    branches: [ dev, main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: google-ads-mcp-cluster
  GKE_ZONE: us-central1
  IMAGE: google-ads-mcp-server
  NAMESPACE: dev

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy to Dev
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - name: Auth to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: 'gke-gcloud-auth-plugin'
        
    - name: Auth Docker
      run: gcloud auth configure-docker
      
    - name: Get GKE Credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Debug Kubernetes Configuration
      run: |
        echo "⚙️ Kubernetes Configuration Debug"
        echo "- GitHub Runner: $(uname -a)"
        echo "- kubectl version: $(kubectl version --client)"
        echo "- Google Cloud SDK version: $(gcloud --version | head -n 1)"
        echo "- Testing cluster connectivity:"
        kubectl get namespaces
        echo "- Current context:"
        kubectl config current-context
        echo "- Available contexts:"
        kubectl config get-contexts
        echo "- Node status:"
        kubectl get nodes
        
    - name: Build Docker Image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA .
        
    - name: Push Docker Image
      run: |
        docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        
    - name: Update Kubernetes resources
      run: |
        # Replace the placeholder image with the actual image in the deployment
        sed -i "s|gcr.io/PROJECT_ID/google-ads-mcp-server:TAG|gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA|g" kubernetes/base/deployment.yaml
        
    - name: Deploy to GKE Dev Environment
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Create secret with actual credentials
        echo "Creating google-ads-credentials secret in ${{ env.NAMESPACE }} namespace"
        kubectl create secret generic google-ads-credentials \
          --namespace=${{ env.NAMESPACE }} \
          --from-literal=GOOGLE_ADS_DEVELOPER_TOKEN=${{ secrets.GOOGLE_ADS_DEVELOPER_TOKEN }} \
          --from-literal=GOOGLE_ADS_CLIENT_ID=${{ secrets.GOOGLE_ADS_CLIENT_ID }} \
          --from-literal=GOOGLE_ADS_CLIENT_SECRET=${{ secrets.GOOGLE_ADS_CLIENT_SECRET }} \
          --from-literal=GOOGLE_ADS_REFRESH_TOKEN=${{ secrets.GOOGLE_ADS_REFRESH_TOKEN }} \
          --from-literal=GOOGLE_ADS_LOGIN_CUSTOMER_ID=${{ secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Verify secret was created
        echo "Verifying secret exists in ${{ env.NAMESPACE }} namespace"
        kubectl get secret google-ads-credentials -n ${{ env.NAMESPACE }}
        
        # Deploy using kustomize
        echo "Deploying application with kustomize"
        ./kustomize build kubernetes/overlays/${{ env.NAMESPACE }} | kubectl apply --validate=false -f -
        
        # Wait for deployment to finish
        echo "Waiting for deployment to stabilize..."
        kubectl rollout status deployment/google-ads-mcp-server -n ${{ env.NAMESPACE }} --timeout=300s
        
    - name: Debug Deployment Failure
      if: failure()
      run: |
        echo "Checking pod status..."
        kubectl get pods -n ${{ env.NAMESPACE }}
        
        echo "Checking deployment details..."
        kubectl describe deployment google-ads-mcp-server -n ${{ env.NAMESPACE }}
        
        echo "Getting pod details and logs..."
        POD_NAME=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=google-ads-mcp-server -o jsonpath="{.items[0].metadata.name}")
        if [ -n "$POD_NAME" ]; then
          echo "Pod events and details:"
          kubectl describe pod $POD_NAME -n ${{ env.NAMESPACE }}
          echo "Pod logs:"
          kubectl logs $POD_NAME -n ${{ env.NAMESPACE }} || echo "Error: Unable to get logs"
        fi
        
    - name: Verify deployment
      run: |
        # Get the pod name
        POD_NAME=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=google-ads-mcp-server -o jsonpath="{.items[0].metadata.name}")
        
        # Check the pod status
        if [ -n "$POD_NAME" ]; then
          echo "Pod status:"
          kubectl get pod $POD_NAME -n ${{ env.NAMESPACE }} -o wide
        else
          echo "No pods found for deployment"
        fi 