name: Deploy to GKE Dev Environment

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: google-ads-mcp-cluster
  GKE_ZONE: us-central1
  IMAGE: google-ads-mcp-server
  NAMESPACE: dev
  REGISTRY: us-central1-docker.pkg.dev

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install and Verify MCP
      run: |
        python -m pip install --upgrade pip
        echo "Checking if MCP can be installed from GitHub..."
        pip install "mcp @ git+https://github.com/modelcontextprotocol/python-sdk.git"
        echo "Verifying MCP installation..."
        python -c "import mcp; print('Successfully installed MCP')"
        echo "Installing all requirements..."
        pip install -r requirements.txt
        
    - name: Auth to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: 'gke-gcloud-auth-plugin'
        
    - name: Configure Docker with Artifact Registry
      run: |
        gcloud auth configure-docker $REGISTRY
        
    - name: Build Docker Image
      run: |
        docker build -t $REGISTRY/$PROJECT_ID/$IMAGE:$GITHUB_SHA .
        
    - name: Push Docker Image
      run: |
        docker push $REGISTRY/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        
    - name: Get GKE Credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Debug Kubernetes Configuration
      run: |
        echo "⚙️ Kubernetes Configuration Debug"
        echo "- kubectl version: $(kubectl version --client)"
        echo "- Current context: $(kubectl config current-context)"
        echo "- Available namespaces:"
        kubectl get namespaces
        
    - name: Update deployment image
      run: |
        # Replace the placeholder image with the actual image
        sed -i "s|gcr.io/PROJECT_ID/google-ads-mcp-server:TAG|$REGISTRY/$PROJECT_ID/$IMAGE:$GITHUB_SHA|g" kubernetes/base/deployment.yaml
        
    - name: Verify and Create Secret
      run: |
        # First, check if the secret already exists
        echo "Checking if google-ads-credentials secret exists in $NAMESPACE namespace..."
        if kubectl get secret google-ads-credentials -n $NAMESPACE > /dev/null 2>&1; then
          echo "Secret already exists, deleting it before recreation..."
          kubectl delete secret google-ads-credentials -n $NAMESPACE
        else
          echo "Secret does not exist, creating it..."
        fi
        
        # Create namespace if it doesn't exist
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Create the secret explicitly (without --dry-run)
        echo "Creating google-ads-credentials secret in $NAMESPACE namespace"
        kubectl create secret generic google-ads-credentials \
          --namespace=$NAMESPACE \
          --from-literal=GOOGLE_ADS_DEVELOPER_TOKEN=${{ secrets.GOOGLE_ADS_DEVELOPER_TOKEN }} \
          --from-literal=GOOGLE_ADS_CLIENT_ID=${{ secrets.GOOGLE_ADS_CLIENT_ID }} \
          --from-literal=GOOGLE_ADS_CLIENT_SECRET=${{ secrets.GOOGLE_ADS_CLIENT_SECRET }} \
          --from-literal=GOOGLE_ADS_REFRESH_TOKEN=${{ secrets.GOOGLE_ADS_REFRESH_TOKEN }} \
          --from-literal=GOOGLE_ADS_LOGIN_CUSTOMER_ID=${{ secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID }}
        
        # Verify the secret was created
        echo "Verifying secret exists..."
        kubectl get secret google-ads-credentials -n $NAMESPACE
        
    - name: Deploy to Kubernetes
      run: |
        echo "Deploying application with kustomize"
        ./kustomize build kubernetes/overlays/$NAMESPACE | kubectl apply --validate=false -f -
        
        # Wait for deployment to finish with increased timeout
        echo "Waiting for deployment to stabilize..."
        kubectl rollout status deployment/google-ads-mcp-server -n $NAMESPACE --timeout=300s
        
    - name: Debug Deployment Failure
      if: failure()
      run: |
        echo "Checking pod status..."
        kubectl get pods -n $NAMESPACE
        
        echo "Checking deployment details..."
        kubectl describe deployment google-ads-mcp-server -n $NAMESPACE
        
        echo "Getting pod details and logs..."
        POD_NAME=$(kubectl get pods -n $NAMESPACE -l app=google-ads-mcp-server -o jsonpath="{.items[0].metadata.name}")
        if [ -n "$POD_NAME" ]; then
          echo "Pod events and details:"
          kubectl describe pod $POD_NAME -n $NAMESPACE
          echo "Pod logs (if available):"
          kubectl logs $POD_NAME -n $NAMESPACE --tail=100 || echo "Unable to get logs"
        fi 