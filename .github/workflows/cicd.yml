name: Google Ads MCP Server CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          pytest test_api.py test_ads.py
        env:
          # Use placeholder values for tests
          GOOGLE_ADS_DEVELOPER_TOKEN: ${{ secrets.GOOGLE_ADS_DEVELOPER_TOKEN_TEST }}
          GOOGLE_ADS_CLIENT_ID: ${{ secrets.GOOGLE_ADS_CLIENT_ID_TEST }}
          GOOGLE_ADS_CLIENT_SECRET: ${{ secrets.GOOGLE_ADS_CLIENT_SECRET_TEST }}
          GOOGLE_ADS_REFRESH_TOKEN: ${{ secrets.GOOGLE_ADS_REFRESH_TOKEN_TEST }}
          GOOGLE_ADS_LOGIN_CUSTOMER_ID: ${{ secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID_TEST }}

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
            
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: development
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: 'google-ads-mcp-cluster'
          location: 'us-central1'
          project_id: 'western-lambda-454123-h8'
          
      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
      - name: Debug Kubernetes configuration
        run: |
          kubectl config view
          kubectl config current-context
          kubectl version --client
          kubectl get nodes
          
      - name: Deploy to Kubernetes
        run: |
          # Create dev namespace if it doesn't exist
          kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -
          
          # Navigate to the overlay directory
          cd kubernetes/overlays/dev
          
          # Fix deprecated kustomization format
          kustomize edit fix
          
          # Set the image in the kustomization file
          kustomize edit set image gcr.io/PROJECT_ID/google-ads-mcp-server=ghcr.io/${{ github.repository }}:sha-$(git rev-parse --short HEAD)
          
          # Build and apply with validation disabled for CI environment
          kustomize build . | kubectl apply --validate=false -f -
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/google-ads-mcp-server -n dev --timeout=180s
          kubectl get deployments,services -n dev
          
      - name: Post-deployment healthcheck
        run: |
          # Wait for service to be available
          sleep 30
          
          # Get service URL
          SERVICE_IP=$(kubectl -n dev get service google-ads-mcp-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Check health endpoint
          if [[ -n "$SERVICE_IP" ]]; then
            curl -s http://$SERVICE_IP:8000/health | jq -e '.status == "OK"' || (echo "Health check failed"; exit 1)
            echo "Health check passed"
          else
            echo "Service IP not available yet, skipping health check"
          fi 