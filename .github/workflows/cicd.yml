name: Google Ads MCP Server CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          pytest test_api.py test_ads.py
        env:
          # Use placeholder values for tests
          GOOGLE_ADS_DEVELOPER_TOKEN: ${{ secrets.GOOGLE_ADS_DEVELOPER_TOKEN_TEST }}
          GOOGLE_ADS_CLIENT_ID: ${{ secrets.GOOGLE_ADS_CLIENT_ID_TEST }}
          GOOGLE_ADS_CLIENT_SECRET: ${{ secrets.GOOGLE_ADS_CLIENT_SECRET_TEST }}
          GOOGLE_ADS_REFRESH_TOKEN: ${{ secrets.GOOGLE_ADS_REFRESH_TOKEN_TEST }}
          GOOGLE_ADS_LOGIN_CUSTOMER_ID: ${{ secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID_TEST }}

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
            
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: development
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GKE_CLUSTER: google-ads-mcp-cluster
      GKE_ZONE: us-central1
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          project_id: '${{ env.PROJECT_ID }}'
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Install GKE auth plugin
        run: |
          echo "Installing GKE auth plugin..."
          gcloud components install gke-gcloud-auth-plugin
          echo "Setting USE_GKE_GCLOUD_AUTH_PLUGIN=True"
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
          echo "Verifying installation..."
          which gke-gcloud-auth-plugin || echo "Plugin not found in PATH"

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
      - name: Debug Kubernetes configuration
        run: |
          kubectl config view
          kubectl config current-context
          kubectl version --client
          kubectl get nodes
          
      - name: Create Google Ads credentials secret
        run: |
          echo "Creating Google Ads credentials secret in dev namespace..."
          
          # Delete the secret if it already exists to ensure clean update
          kubectl delete secret google-ads-credentials -n dev --ignore-not-found
          
          # Create the secret using all required Google Ads API credentials
          kubectl create secret generic google-ads-credentials -n dev \
            --from-literal=GOOGLE_ADS_DEVELOPER_TOKEN="${{ secrets.GOOGLE_ADS_DEVELOPER_TOKEN }}" \
            --from-literal=GOOGLE_ADS_CLIENT_ID="${{ secrets.GOOGLE_ADS_CLIENT_ID }}" \
            --from-literal=GOOGLE_ADS_CLIENT_SECRET="${{ secrets.GOOGLE_ADS_CLIENT_SECRET }}" \
            --from-literal=GOOGLE_ADS_REFRESH_TOKEN="${{ secrets.GOOGLE_ADS_REFRESH_TOKEN }}" \
            --from-literal=GOOGLE_ADS_LOGIN_CUSTOMER_ID="${{ secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID }}" \
            --from-literal=GOOGLE_ADS_CLIENT_CUSTOMER_ID="${{ secrets.GOOGLE_ADS_CLIENT_CUSTOMER_ID }}"
          
          # Verify the secret was created
          kubectl get secret google-ads-credentials -n dev
          
      - name: Deploy to Kubernetes
        run: |
          # Create dev namespace if it doesn't exist
          kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -
          
          # Navigate to the overlay directory
          cd kubernetes/overlays/dev
          
          # Fix deprecated kustomization format
          kustomize edit fix
          
          # Set the image in the kustomization file
          kustomize edit set image gcr.io/PROJECT_ID/google-ads-mcp-server=ghcr.io/${{ github.repository }}:sha-${{ github.sha }}
          
          # Build and apply with validation disabled for CI environment
          kustomize build . | kubectl apply --validate=false -f -
          
      - name: Verify deployment
        run: |
          # Increase timeout and add initial delay for container startup
          echo "Waiting for deployment to stabilize..."
          sleep 60
          
          # Attempt rollout status with increased timeout (10 minutes instead of 5)
          kubectl rollout status deployment/google-ads-mcp-server -n dev --timeout=600s
          kubectl get deployments,services -n dev
          
      - name: Debug deployment failure
        if: failure()
        run: |
          echo "Checking pod status..."
          kubectl get pods -n dev
          
          echo "Checking deployment details..."
          kubectl describe deployment google-ads-mcp-server -n dev
          
          echo "Getting pod details and logs..."
          POD_NAME=$(kubectl get pods -n dev -l app=google-ads-mcp-server -o jsonpath="{.items[0].metadata.name}")
          if [ -n "$POD_NAME" ]; then
            echo "Pod events and details:"
            kubectl describe pod $POD_NAME -n dev
            echo "Pod logs:"
            kubectl logs $POD_NAME -n dev --all-containers=true
            echo "Previous pod logs (if any):"
            kubectl logs $POD_NAME -n dev --all-containers=true --previous
          fi
          
          # Check for stuck terminating pods and force delete if needed
          STUCK_PODS=$(kubectl get pods -n dev | grep Terminating | awk '{print $1}')
          if [ -n "$STUCK_PODS" ]; then
            echo "Found stuck terminating pods: $STUCK_PODS"
            echo "Attempting to force delete stuck pods..."
            for pod in $STUCK_PODS; do
              kubectl delete pod $pod -n dev --force --grace-period=0
            done
          fi
          
          # Check events in the namespace
          echo "Checking events in the namespace..."
          kubectl get events -n dev --sort-by=.metadata.creationTimestamp
          
          echo "Checking node status..."
          kubectl describe nodes | grep -A 10 "Allocated resources"
          
      - name: Post-deployment healthcheck
        run: |
          # Wait longer for service to be available
          echo "Waiting for service to become available..."
          sleep 60
          
          # Get service URL
          SERVICE_IP=$(kubectl -n dev get service google-ads-mcp-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Check health endpoint
          if [[ -n "$SERVICE_IP" ]]; then
            echo "Testing health endpoint at http://$SERVICE_IP:8000/health"
            curl -v http://$SERVICE_IP:8000/health || true
            curl -s http://$SERVICE_IP:8000/health | jq -e '.status == "OK"' || (echo "Health check failed"; exit 1)
            echo "Health check passed"
          else
            echo "Service IP not available yet, skipping health check"
          fi 